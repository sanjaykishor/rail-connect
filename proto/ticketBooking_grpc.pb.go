// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: proto/ticketBooking.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TicketBookingService_PurchaseTicket_FullMethodName    = "/ticketBooking.TicketBookingService/PurchaseTicket"
	TicketBookingService_GetReceipt_FullMethodName        = "/ticketBooking.TicketBookingService/GetReceipt"
	TicketBookingService_GetUsersBySection_FullMethodName = "/ticketBooking.TicketBookingService/GetUsersBySection"
	TicketBookingService_RemoveUser_FullMethodName        = "/ticketBooking.TicketBookingService/RemoveUser"
	TicketBookingService_UpdateUserSeat_FullMethodName    = "/ticketBooking.TicketBookingService/UpdateUserSeat"
)

// TicketBookingServiceClient is the client API for TicketBookingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition
type TicketBookingServiceClient interface {
	PurchaseTicket(ctx context.Context, in *PurchaseTicketRequest, opts ...grpc.CallOption) (*PurchaseTicketResponse, error)
	GetReceipt(ctx context.Context, in *GetReceiptRequest, opts ...grpc.CallOption) (*GetReceiptResponse, error)
	GetUsersBySection(ctx context.Context, in *GetUsersBySectionRequest, opts ...grpc.CallOption) (*GetUsersBySectionResponse, error)
	RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error)
	UpdateUserSeat(ctx context.Context, in *UpdateUserSeatRequest, opts ...grpc.CallOption) (*UpdateUserSeatResponse, error)
}

type ticketBookingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketBookingServiceClient(cc grpc.ClientConnInterface) TicketBookingServiceClient {
	return &ticketBookingServiceClient{cc}
}

func (c *ticketBookingServiceClient) PurchaseTicket(ctx context.Context, in *PurchaseTicketRequest, opts ...grpc.CallOption) (*PurchaseTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseTicketResponse)
	err := c.cc.Invoke(ctx, TicketBookingService_PurchaseTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBookingServiceClient) GetReceipt(ctx context.Context, in *GetReceiptRequest, opts ...grpc.CallOption) (*GetReceiptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReceiptResponse)
	err := c.cc.Invoke(ctx, TicketBookingService_GetReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBookingServiceClient) GetUsersBySection(ctx context.Context, in *GetUsersBySectionRequest, opts ...grpc.CallOption) (*GetUsersBySectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersBySectionResponse)
	err := c.cc.Invoke(ctx, TicketBookingService_GetUsersBySection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBookingServiceClient) RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUserResponse)
	err := c.cc.Invoke(ctx, TicketBookingService_RemoveUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBookingServiceClient) UpdateUserSeat(ctx context.Context, in *UpdateUserSeatRequest, opts ...grpc.CallOption) (*UpdateUserSeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserSeatResponse)
	err := c.cc.Invoke(ctx, TicketBookingService_UpdateUserSeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketBookingServiceServer is the server API for TicketBookingService service.
// All implementations must embed UnimplementedTicketBookingServiceServer
// for forward compatibility.
//
// Service definition
type TicketBookingServiceServer interface {
	PurchaseTicket(context.Context, *PurchaseTicketRequest) (*PurchaseTicketResponse, error)
	GetReceipt(context.Context, *GetReceiptRequest) (*GetReceiptResponse, error)
	GetUsersBySection(context.Context, *GetUsersBySectionRequest) (*GetUsersBySectionResponse, error)
	RemoveUser(context.Context, *RemoveUserRequest) (*RemoveUserResponse, error)
	UpdateUserSeat(context.Context, *UpdateUserSeatRequest) (*UpdateUserSeatResponse, error)
	mustEmbedUnimplementedTicketBookingServiceServer()
}

// UnimplementedTicketBookingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTicketBookingServiceServer struct{}

func (UnimplementedTicketBookingServiceServer) PurchaseTicket(context.Context, *PurchaseTicketRequest) (*PurchaseTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseTicket not implemented")
}
func (UnimplementedTicketBookingServiceServer) GetReceipt(context.Context, *GetReceiptRequest) (*GetReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceipt not implemented")
}
func (UnimplementedTicketBookingServiceServer) GetUsersBySection(context.Context, *GetUsersBySectionRequest) (*GetUsersBySectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersBySection not implemented")
}
func (UnimplementedTicketBookingServiceServer) RemoveUser(context.Context, *RemoveUserRequest) (*RemoveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedTicketBookingServiceServer) UpdateUserSeat(context.Context, *UpdateUserSeatRequest) (*UpdateUserSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSeat not implemented")
}
func (UnimplementedTicketBookingServiceServer) mustEmbedUnimplementedTicketBookingServiceServer() {}
func (UnimplementedTicketBookingServiceServer) testEmbeddedByValue()                              {}

// UnsafeTicketBookingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketBookingServiceServer will
// result in compilation errors.
type UnsafeTicketBookingServiceServer interface {
	mustEmbedUnimplementedTicketBookingServiceServer()
}

func RegisterTicketBookingServiceServer(s grpc.ServiceRegistrar, srv TicketBookingServiceServer) {
	// If the following call pancis, it indicates UnimplementedTicketBookingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TicketBookingService_ServiceDesc, srv)
}

func _TicketBookingService_PurchaseTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBookingServiceServer).PurchaseTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketBookingService_PurchaseTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBookingServiceServer).PurchaseTicket(ctx, req.(*PurchaseTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBookingService_GetReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBookingServiceServer).GetReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketBookingService_GetReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBookingServiceServer).GetReceipt(ctx, req.(*GetReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBookingService_GetUsersBySection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersBySectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBookingServiceServer).GetUsersBySection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketBookingService_GetUsersBySection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBookingServiceServer).GetUsersBySection(ctx, req.(*GetUsersBySectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBookingService_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBookingServiceServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketBookingService_RemoveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBookingServiceServer).RemoveUser(ctx, req.(*RemoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBookingService_UpdateUserSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBookingServiceServer).UpdateUserSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketBookingService_UpdateUserSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBookingServiceServer).UpdateUserSeat(ctx, req.(*UpdateUserSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketBookingService_ServiceDesc is the grpc.ServiceDesc for TicketBookingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketBookingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticketBooking.TicketBookingService",
	HandlerType: (*TicketBookingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PurchaseTicket",
			Handler:    _TicketBookingService_PurchaseTicket_Handler,
		},
		{
			MethodName: "GetReceipt",
			Handler:    _TicketBookingService_GetReceipt_Handler,
		},
		{
			MethodName: "GetUsersBySection",
			Handler:    _TicketBookingService_GetUsersBySection_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _TicketBookingService_RemoveUser_Handler,
		},
		{
			MethodName: "UpdateUserSeat",
			Handler:    _TicketBookingService_UpdateUserSeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ticketBooking.proto",
}
